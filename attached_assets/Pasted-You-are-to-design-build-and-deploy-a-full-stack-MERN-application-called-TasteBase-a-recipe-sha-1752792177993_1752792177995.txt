You are to design, build, and deploy a full-stack MERN application called "TasteBase" ‚Äì a recipe sharing and management platform. The solution must strictly adhere to the Capstone Week 8 instructions and demonstrate competence in backend design, API development, real-time functionality, testing, documentation, deployment, and professional presentation.

=========================== üìå PART 1: PROJECT OVERVIEW ===========================
PROJECT NAME: TasteBase ‚Äì Local Recipe Book

DESCRIPTION:
A full-featured web app that allows users to:

Register and log in securely (JWT auth)
Create, view, update, delete their own recipes
Choose whether recipes are public or private
Search recipes by ingredient, title, or tag
Upload recipe images
Optionally like/bookmark others‚Äô public recipes
(Optional) Comment on recipes using Socket.IO for real-time updates
TARGET USERS:

Home cooks, food bloggers, and food lovers who want to save or share recipes.
PROBLEM SOLVED:
There is no focused tool for organizing, storing, and selectively sharing personal or traditional local recipes with options for privacy or visibility.

STACK TO USE:

Frontend: React, TailwindCSS, Axios, React Router
Backend: Node.js, Express.js
Database: MongoDB Atlas
Authentication: JWT + bcrypt
Deployment: Vercel (frontend), Render (backend)
File Upload: Cloudinary or Multer
Real-Time: Socket.IO (optional)
Testing: Jest, React Testing Library, Supertest
=========================== üß© PART 2: TECHNICAL TASKS ===========================
üõ†Ô∏è Task 1: Planning and Design

Create low-fidelity wireframes for:
Homepage (public recipes)
Dashboard (user recipes)
Login/Register
View recipe
Add/edit recipe
Draft the ERD:
User Model: { username, email, hashedPassword, createdAt }
Recipe Model: { title, desc, ingredients[], instructions[], tags[], imageURL, authorId, isPublic, createdAt }
Define all API endpoints in a structured docs/api.md format
Write a docs/architecture.md to describe how frontend, backend, and database interact
Prepare a roadmap broken into 5‚Äì6 weeks of features and milestones
üõ†Ô∏è Task 2: Backend Development

Use Express.js to build RESTful API:
POST /auth/register
POST /auth/login
GET /recipes/public
GET /recipes/my
POST /recipes
PUT /recipes/:id
DELETE /recipes/:id
GET /recipes/search?q=
Use Mongoose to validate models and relationships
Add JWT authentication and protected routes
Create middleware:
JWT verification
Request validation
Error handling
Optional: Add Socket.IO setup for real-time comments
Write backend tests with Jest and Supertest
üõ†Ô∏è Task 3: Frontend Development

Use React Router for client-side routing
Implement pages:
Register/Login with validation
Recipe feed (public)
Dashboard with user‚Äôs recipes
Recipe creation form
Recipe detail view
Search results
Build reusable components:
RecipeCard, RecipeForm, Navbar, Loader, ProtectedRoute
Use Tailwind for clean styling
Store auth tokens in localStorage
Ensure real-time UI update for comment feature if implemented
üõ†Ô∏è Task 4: Testing & Quality Assurance

Write backend unit and integration tests:
Auth endpoints
Recipe CRUD
Write frontend tests:
Auth flows
Recipe form and list
Add end-to-end tests (optional) using Cypress or Playwright
Perform manual tests across browsers (Chrome, Firefox, mobile)
Ensure WCAG accessibility: color contrast, semantic tags, keyboard nav
Refactor for readability and modularity
üõ†Ô∏è Task 5: Deployment and Documentation

Deploy backend on Render, connect to MongoDB Atlas
Deploy frontend on Vercel with correct environment variables
Set up GitHub Actions for:
Lint checks
Run backend tests on push
Set up monitoring with console logs or Sentry (optional)
Include complete documentation:
README.md with setup, features, tech stack
docs/api.md (all endpoints)
docs/architecture.md (system overview)
docs/user-guide.md (optional guide for users)
=========================== üé• PART 3: DEMO & PRESENTATION ===========================
DEMO SCRIPT:

Login with test user or register a new one
Show recipe dashboard (create/update/delete)
Search for a recipe by ingredient/tag
Show public recipe feed (including other users' recipes)
Optional: Like/comment in real-time
Show mobile-responsive layout
Walk through GitHub repo and key code sections
Mention future improvements:
Pagination
Ratings
Meal planner
PRESENTATION SLIDES MUST INCLUDE:

Project Title + Tagline
Problem + Solution
Live demo screenshots
Architecture diagram
Tech stack used
Obstacles + how they were solved
What‚Äôs next / future work
=========================== üì¶ PART 4: SUBMISSION CHECKLIST ===========================
‚úÖ Project deployed and fully working
‚úÖ GitHub repo has regular commits and clean code
‚úÖ README contains:

Live deployment link
Setup instructions
Features list
Screenshots
Demo video link (5‚Äì10 min) ‚úÖ All required files present:
/frontend folder
/backend folder
/docs folder with:
api.md
architecture.md
user-guide.md (optional) ‚úÖ Tests included with decent coverage ‚úÖ Accessible and responsive UI
=========================== üß† FINAL NOTES TO LOVABLE: ===========================
Stay modular in structure
Comment all complex logic
Focus on clean UX and visual consistency
Use environment variables for sensitive values
Separate concerns (auth logic, recipe logic, utils)
Prioritize real-world coding practices: validation, error handling, feedback